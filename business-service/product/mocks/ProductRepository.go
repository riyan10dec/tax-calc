// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/riyan10dec/tax-calc/models"

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// GetProducts provides a mock function with given fields: ctx, productIDs
func (_m *ProductRepository) GetProducts(ctx context.Context, productIDs []int32) (error, []*models.Product) {
	ret := _m.Called(ctx, productIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int32) error); ok {
		r0 = rf(ctx, productIDs)
	} else {
		r0 = ret.Error(0)
	}

	var r1 []*models.Product
	if rf, ok := ret.Get(1).(func(context.Context, []int32) []*models.Product); ok {
		r1 = rf(ctx, productIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*models.Product)
		}
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, _a1
func (_m *ProductRepository) Store(ctx context.Context, _a1 models.Product) (error, *models.Product) {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Product) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	var r1 *models.Product
	if rf, ok := ret.Get(1).(func(context.Context, models.Product) *models.Product); ok {
		r1 = rf(ctx, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Product)
		}
	}

	return r0, r1
}
