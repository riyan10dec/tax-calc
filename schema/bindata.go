// Code generated by go-bindata.
// sources:
// schema/input/input-product.graphql
// schema/schema.graphql
// schema/type/product-summary.graphql
// schema/type/product.graphql
// schema/type/tax.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaInputInputProductGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2b\x28\x2d\x51\x08\x28\xca\x4f\x29\x4d\x2e\xf1\x04\x73\xaa\xb9\x38\x4b\x12\x2b\x9c\xf3\x53\x52\xad\x14\x3c\xf3\x4a\x14\xb9\x38\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x38\x0b\x8a\x32\x93\x53\xad\x14\xdc\x72\xf2\x13\x4b\x14\xb9\x6a\x01\x01\x00\x00\xff\xff\x56\x2a\xd4\x6f\x43\x00\x00\x00")

func schemaInputInputProductGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaInputInputProductGraphql,
		"schema/input/input-product.graphql",
	)
}

func schemaInputInputProductGraphql() (*asset, error) {
	bytes, err := schemaInputInputProductGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/input/input-product.graphql", size: 67, mode: os.FileMode(420), modTime: time.Unix(1548013491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\xb1\x0a\xc2\x40\x10\x44\xfb\xfd\x8a\x49\xa7\xbf\x70\xb5\xcd\x15\x82\xa2\x9d\x58\x2c\xe7\x81\x81\xdc\xe5\x4c\x76\xc1\x20\xf7\xef\x92\x64\x23\x76\xbb\x6f\xe6\x8d\x4c\x25\xe2\xac\x71\x98\xf0\x21\x00\xa0\x4a\x63\x78\xc6\xc4\xf6\xbf\xe6\xcc\xad\x95\x05\x24\x15\x96\xb6\xcf\x0e\x47\xbb\xa8\x12\x2d\x3b\x1b\x30\x35\x70\x17\xb4\x63\x89\x57\x7e\xef\xca\xd0\x3f\x34\x88\x3f\x8c\x0e\x37\x9f\xa5\xb9\x37\x7b\x87\xd3\x4a\x2f\x9a\x12\xdb\x7e\x9b\x8b\x8a\xf1\xcd\xfa\x15\xfd\x1c\xfe\x89\x54\xbf\x01\x00\x00\xff\xff\x67\xb2\x9c\x09\xc1\x00\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 193, mode: os.FileMode(420), modTime: time.Unix(1548015080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeProductSummaryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x28\xca\x4f\x29\x4d\x2e\x09\x2e\xcd\xcd\x4d\x2c\xaa\x54\xa8\xe6\x52\x50\x50\x50\x28\x28\xca\x4c\x4e\x0d\x2e\x4d\x0a\xc9\x2f\x49\xcc\xb1\x52\x70\xcb\xc9\x4f\x2c\x51\x04\xcb\x94\x24\x56\x60\x15\x4f\x2f\x4a\xcc\x4b\xc1\x14\x2e\x80\x98\x5e\x6c\xa5\x10\x0d\xb5\x28\x96\xab\x16\x10\x00\x00\xff\xff\xe5\x89\x6e\xd0\x78\x00\x00\x00")

func schemaTypeProductSummaryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeProductSummaryGraphql,
		"schema/type/product-summary.graphql",
	)
}

func schemaTypeProductSummaryGraphql() (*asset, error) {
	bytes, err := schemaTypeProductSummaryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/product-summary.graphql", size: 120, mode: os.FileMode(420), modTime: time.Unix(1548008603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeProductGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x9e\xe2\x7b\x8d\x59\x2a\x08\xee\x0a\x7a\x81\xd8\x89\x32\x10\x93\x10\x52\xb0\x88\x77\x17\xac\x14\x71\x96\x09\xef\xfd\xff\x73\x76\xc6\x10\x56\xa7\x31\xf1\xdc\x00\x40\xab\x05\x47\xcd\xed\xe7\x50\xba\x73\xc1\x29\xa3\xe9\x6d\xf9\x78\xb4\x91\x0b\x0e\x62\xf4\x65\x92\x1e\x7b\xab\xfc\x63\x05\x5f\x27\xad\x74\x11\x2e\xd8\x99\x09\x93\xae\xe8\xd0\xf9\x7d\xa2\x2f\x83\xce\xb3\xff\x95\xa7\x25\xc9\x8a\xbe\xde\x01\x00\x00\xff\xff\x5a\x97\x7c\x94\xbe\x00\x00\x00")

func schemaTypeProductGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeProductGraphql,
		"schema/type/product.graphql",
	)
}

func schemaTypeProductGraphql() (*asset, error) {
	bytes, err := schemaTypeProductGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/product.graphql", size: 190, mode: os.FileMode(420), modTime: time.Unix(1548009016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeTaxGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x49\xac\x50\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\xcc\x2b\x51\x04\x73\x92\xf3\x53\x52\xa1\xdc\x5a\x40\x00\x00\x00\xff\xff\x73\xee\x8b\x27\x28\x00\x00\x00")

func schemaTypeTaxGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeTaxGraphql,
		"schema/type/tax.graphql",
	)
}

func schemaTypeTaxGraphql() (*asset, error) {
	bytes, err := schemaTypeTaxGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/tax.graphql", size: 40, mode: os.FileMode(420), modTime: time.Unix(1548008943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/input/input-product.graphql": schemaInputInputProductGraphql,
	"schema/schema.graphql": schemaSchemaGraphql,
	"schema/type/product-summary.graphql": schemaTypeProductSummaryGraphql,
	"schema/type/product.graphql": schemaTypeProductGraphql,
	"schema/type/tax.graphql": schemaTypeTaxGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"input": &bintree{nil, map[string]*bintree{
			"input-product.graphql": &bintree{schemaInputInputProductGraphql, map[string]*bintree{}},
		}},
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
		"type": &bintree{nil, map[string]*bintree{
			"product-summary.graphql": &bintree{schemaTypeProductSummaryGraphql, map[string]*bintree{}},
			"product.graphql": &bintree{schemaTypeProductGraphql, map[string]*bintree{}},
			"tax.graphql": &bintree{schemaTypeTaxGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

